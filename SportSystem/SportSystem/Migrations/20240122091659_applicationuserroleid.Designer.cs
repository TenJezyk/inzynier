// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportSystem.Data.DataContext;

#nullable disable

namespace SportSystem.Migrations
{
    [DbContext(typeof(SportSystemDbContext))]
    [Migration("20240122091659_applicationuserroleid")]
    partial class applicationuserroleid
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Identity")
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("IdentityRole", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityRoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityUserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("SportSystem.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ApplicationUserRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("IdentityUsers", "Identity");
                });

            modelBuilder.Entity("SportSystem.Data.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GameDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HostTeamGoals")
                        .HasColumnType("int");

                    b.Property<Guid>("HostTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("VisitorTeamGoals")
                        .HasColumnType("int");

                    b.Property<Guid>("VisitorTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HostTeamId");

                    b.HasIndex("LocationId");

                    b.HasIndex("VisitorTeamId");

                    b.ToTable("Games", "Identity");
                });

            modelBuilder.Entity("SportSystem.Data.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.Property<int>("Surface")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Locations", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33cd111b-ebe1-40d8-98ad-dd51436c5743"),
                            City = "Białystok",
                            Country = "Polska",
                            PostalCode = 15222,
                            State = "Podlaskie",
                            Street = "Dąbrowskiego",
                            StreetNumber = 15,
                            Surface = 0
                        },
                        new
                        {
                            Id = new Guid("6c8a364a-8914-4bde-9bce-9414dfb1324b"),
                            City = "Białystok",
                            Country = "Polska",
                            PostalCode = 154777,
                            State = "Podlaskie",
                            Street = "Piotrkowska",
                            StreetNumber = 28,
                            Surface = 1
                        },
                        new
                        {
                            Id = new Guid("d6386985-f0d9-49c4-bd5a-37e30752010e"),
                            City = "Białystok",
                            Country = "Polska",
                            PostalCode = 12345,
                            State = "Podlaskie",
                            Street = "Zielona",
                            StreetNumber = 9,
                            Surface = 0
                        },
                        new
                        {
                            Id = new Guid("8c43e9c9-bd5b-45dc-bc89-1529e7fe843b"),
                            City = "Białystok",
                            Country = "Polska",
                            PostalCode = 54321,
                            State = "Podlaskie",
                            Street = "Mazurska",
                            StreetNumber = 47,
                            Surface = 1
                        },
                        new
                        {
                            Id = new Guid("c18bc5fa-fea3-477f-a553-c95ea2dd83dd"),
                            City = "Białystok",
                            Country = "Polska",
                            PostalCode = 67890,
                            State = "Podlaskie",
                            Street = "Grunwaldzka",
                            StreetNumber = 82,
                            Surface = 0
                        },
                        new
                        {
                            Id = new Guid("6ebdf02c-8b6c-41e2-9573-3988fbf80a09"),
                            City = "Białystok",
                            Country = "Polska",
                            PostalCode = 11111,
                            State = "Podlaskie",
                            Street = "Kwiatowa",
                            StreetNumber = 11,
                            Surface = 1
                        },
                        new
                        {
                            Id = new Guid("5b1f8e85-aa14-4b46-9c13-39820dafeb6e"),
                            City = "Białystok",
                            Country = "Polska",
                            PostalCode = 22222,
                            State = "Podlaskie",
                            Street = "Słoneczna",
                            StreetNumber = 33,
                            Surface = 0
                        },
                        new
                        {
                            Id = new Guid("37443906-616e-4cd5-95ea-19d4fdf8e420"),
                            City = "Białystok",
                            Country = "Polska",
                            PostalCode = 33333,
                            State = "Podlaskie",
                            Street = "Piękna",
                            StreetNumber = 16,
                            Surface = 1
                        },
                        new
                        {
                            Id = new Guid("401e3dbe-cb25-452e-ac16-eaa7f83efd82"),
                            City = "Białystok",
                            Country = "Polska",
                            PostalCode = 44444,
                            State = "Podlaskie",
                            Street = "Zachodnia",
                            StreetNumber = 5,
                            Surface = 0
                        },
                        new
                        {
                            Id = new Guid("7ea999dc-8b6e-4b85-a2d5-d4dce4b2e3f2"),
                            City = "Białystok",
                            Country = "Polska",
                            PostalCode = 55555,
                            State = "Podlaskie",
                            Street = "Akacjowa",
                            StreetNumber = 22,
                            Surface = 1
                        },
                        new
                        {
                            Id = new Guid("ca165a98-a0e1-4ed4-8df3-c65bf8279e19"),
                            City = "Białystok",
                            Country = "Polska",
                            PostalCode = 66666,
                            State = "Podlaskie",
                            Street = "Klonowa",
                            StreetNumber = 18,
                            Surface = 0
                        },
                        new
                        {
                            Id = new Guid("c0a3ab6d-76ec-4569-b500-ab52a41fb161"),
                            City = "Białystok",
                            Country = "Polska",
                            PostalCode = 77777,
                            State = "Podlaskie",
                            Street = "Nadrzeczna",
                            StreetNumber = 39,
                            Surface = 1
                        },
                        new
                        {
                            Id = new Guid("f7ba5d45-10f8-41a1-afef-4502b4891ad1"),
                            City = "Białystok",
                            Country = "Polska",
                            PostalCode = 88888,
                            State = "Podlaskie",
                            Street = "Topolowa",
                            StreetNumber = 7,
                            Surface = 0
                        },
                        new
                        {
                            Id = new Guid("4857e092-8e3e-4b03-9b03-e3583c91908e"),
                            City = "Białystok",
                            Country = "Polska",
                            PostalCode = 99999,
                            State = "Podlaskie",
                            Street = "Kamienna",
                            StreetNumber = 25,
                            Surface = 1
                        },
                        new
                        {
                            Id = new Guid("533bd042-bb1a-42bb-8526-64f1d5a8503b"),
                            City = "Białystok",
                            Country = "Polska",
                            PostalCode = 101010,
                            State = "Podlaskie",
                            Street = "Żytnia",
                            StreetNumber = 12,
                            Surface = 0
                        },
                        new
                        {
                            Id = new Guid("966af0f1-6fb0-436f-8bd3-657fd113022e"),
                            City = "Białystok",
                            Country = "Polska",
                            PostalCode = 111111,
                            State = "Podlaskie",
                            Street = "Łąkowa",
                            StreetNumber = 31,
                            Surface = 1
                        });
                });

            modelBuilder.Entity("SportSystem.Data.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams", "Identity");
                });

            modelBuilder.Entity("SportSystem.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("00000001-0000-0000-0000-000000000000"));

                    b.Property<Guid?>("RoleInTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserRoleInTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleInTeamId");

                    b.ToTable("User", "Identity");
                });

            modelBuilder.Entity("SportSystem.Data.Models.UserRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000001-0000-0000-0000-000000000000"),
                            Name = "Coach"
                        },
                        new
                        {
                            Id = new Guid("00000002-0000-0000-0000-000000000000"),
                            Name = "NormalUser"
                        });
                });

            modelBuilder.Entity("SportSystem.Data.Models.UserTeam", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("UserTeams", "Identity");
                });

            modelBuilder.Entity("SportSystem.Data.Models.UserTeamRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTeamRole", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000001-0000-0000-0000-000000000000"),
                            Name = "Goalkeeper"
                        },
                        new
                        {
                            Id = new Guid("00000002-0000-0000-0000-000000000000"),
                            Name = "Defender"
                        },
                        new
                        {
                            Id = new Guid("00000003-0000-0000-0000-000000000000"),
                            Name = "DefensiveMidfielder"
                        },
                        new
                        {
                            Id = new Guid("00000004-0000-0000-0000-000000000000"),
                            Name = "ForwardMidfielder"
                        },
                        new
                        {
                            Id = new Guid("00000005-0000-0000-0000-000000000000"),
                            Name = "Midfielder"
                        },
                        new
                        {
                            Id = new Guid("00000006-0000-0000-0000-000000000000"),
                            Name = "Striker"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SportSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SportSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SportSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportSystem.Data.Models.Game", b =>
                {
                    b.HasOne("SportSystem.Data.Models.Team", "HostTeam")
                        .WithMany("HomeGames")
                        .HasForeignKey("HostTeamId")
                        .IsRequired();

                    b.HasOne("SportSystem.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportSystem.Data.Models.Team", "VisitorsTeam")
                        .WithMany("VisitorsGames")
                        .HasForeignKey("VisitorTeamId")
                        .IsRequired();

                    b.Navigation("HostTeam");

                    b.Navigation("Location");

                    b.Navigation("VisitorsTeam");
                });

            modelBuilder.Entity("SportSystem.Data.Models.User", b =>
                {
                    b.HasOne("SportSystem.Data.Models.UserRoles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportSystem.Data.Models.UserTeamRole", "RoleInTeam")
                        .WithMany()
                        .HasForeignKey("RoleInTeamId");

                    b.Navigation("Role");

                    b.Navigation("RoleInTeam");
                });

            modelBuilder.Entity("SportSystem.Data.Models.UserTeam", b =>
                {
                    b.HasOne("SportSystem.Data.Models.Team", "Team")
                        .WithMany("Users")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportSystem.Data.Models.User", "User")
                        .WithMany("Team")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportSystem.Data.Models.Team", b =>
                {
                    b.Navigation("HomeGames");

                    b.Navigation("Users");

                    b.Navigation("VisitorsGames");
                });

            modelBuilder.Entity("SportSystem.Data.Models.User", b =>
                {
                    b.Navigation("Team");
                });
#pragma warning restore 612, 618
        }
    }
}
